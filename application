# Importation des bibliothèques nécessaires
import tkinter as tk
from tkinter import ttk
from scapy.all import sniff, IP
import threading
import time
import psutil
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Classe principale de l'application
class SniffeurReseau:
    def __init__(self, fenetre):
        self.fenetre = fenetre
        self.fenetre.title("Sniffeur Réseau")
        self.fenetre.geometry("900x600")

        # Définir le mode clair ou sombre
        self.mode_actuel = "clair"

        # Couleurs des thèmes
        self.couleurs_clair = {"fond": "#ffffff", "texte": "#000000"}
        self.couleurs_sombre = {"fond": "#000000", "texte": "#ffffff"}

        # Création des cadres de l'interface
        self.haut = tk.Frame(self.fenetre)
        self.haut.pack(side=tk.TOP, fill=tk.X, padx=10, pady=10)

        self.zone_graphique = tk.Frame(self.haut)
        self.zone_graphique.pack(side=tk.LEFT, padx=5)

        self.zone_commandes = tk.Frame(self.haut)
        self.zone_commandes.pack(side=tk.RIGHT, padx=5)

        self.bas = tk.Frame(self.fenetre)
        self.bas.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))

        # Initialiser les données pour le graphique
        self.entrees = []
        self.sorties = []

        # Création du graphique
        self.fig, self.ax = plt.subplots(figsize=(4, 2))
        self.ligne_entree, = self.ax.plot([], [], label="Entrant", color="blue")
        self.ligne_sortie, = self.ax.plot([], [], label="Sortant", color="green")
        self.ax.set_xlim(0, 60)
        self.ax.set_ylim(0, 200)
        self.ax.set_title("Utilisation Réseau")
        self.ax.legend()
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.zone_graphique)
        self.canvas.get_tk_widget().pack()

        # Affichage de l'état du réseau
        self.label_etat = tk.Label(self.zone_commandes, text="Etat : En attente")
        self.label_etat.pack(pady=5)

        # Bouton pause
        self.en_pause = False
        self.bouton_pause = tk.Button(self.zone_commandes, text="Pause", command=self.toggle_pause)
        self.bouton_pause.pack(pady=5, fill=tk.X)

        # Bouton effacer
        self.bouton_effacer = tk.Button(self.zone_commandes, text="Effacer", command=self.effacer_liste)
        self.bouton_effacer.pack(pady=5, fill=tk.X)

        # Menu déroulant pour filtrer les protocoles
        self.menu_filtre = ttk.Combobox(self.zone_commandes, values=["Tous", "TCP", "UDP", "ICMP"])
        self.menu_filtre.current(0)
        self.menu_filtre.pack(pady=5, fill=tk.X)

        # Bouton pour changer le thème
        self.bouton_theme = tk.Button(self.zone_commandes, text="Changer Thème", command=self.changer_theme)
        self.bouton_theme.pack(pady=5, fill=tk.X)

        # Liste des paquets
        self.liste_paquets = ttk.Treeview(self.bas, columns=("heure", "source", "destination", "protocole"), show="headings")
        for col in ["heure", "source", "destination", "protocole"]:
            self.liste_paquets.heading(col, text=col.capitalize())
        self.liste_paquets.pack(fill=tk.BOTH, expand=True)


        # Style pour Treeview personnalisé (fond clair au départ)
        self.style = ttk.Style()
        self.style.theme_use("default")
        self.appliquer_couleurs_treeview(self.couleurs_clair)

        # Lancement des threads pour le graphique et les paquets
        self.en_cours = True
        threading.Thread(target=self.mise_a_jour_graphique, daemon=True).start()
        threading.Thread(target=self.sniffer_paquets, daemon=True).start()

    # Fonction pour appliquer les couleurs dans la liste des paquets
    def appliquer_couleurs_treeview(self, couleurs):
        self.style.configure("Treeview",
                             background=couleurs["fond"],
                             fieldbackground=couleurs["fond"],
                             foreground=couleurs["texte"],
                             rowheight=25)
        self.style.configure("Treeview.Heading", foreground=couleurs["texte"], background=couleurs["fond"])

    # Fonction pour changer de thème
    def changer_theme(self):
        if self.mode_actuel == "clair":
            couleurs = self.couleurs_sombre
            self.mode_actuel = "sombre"
        else:
            couleurs = self.couleurs_clair
            self.mode_actuel = "clair"

        self.fenetre.configure(bg=couleurs["fond"])
        for cadre in [self.haut, self.zone_graphique, self.zone_commandes, self.bas]:
            cadre.configure(bg=couleurs["fond"])
        for widget in [self.label_etat, self.bouton_pause, self.bouton_effacer, self.bouton_theme]:
            widget.configure(bg=couleurs["fond"], fg=couleurs["texte"])

        self.ax.set_facecolor(couleurs["fond"])
        self.fig.patch.set_facecolor(couleurs["fond"])
        self.ax.title.set_color(couleurs["texte"])
        self.ax.tick_params(colors=couleurs["texte"])
        self.canvas.draw()

        self.appliquer_couleurs_treeview(couleurs)

    # Fonction pour activer/désactiver la pause
    def toggle_pause(self):
        self.en_pause = not self.en_pause
        self.bouton_pause.config(text="Reprendre" if self.en_pause else "Pause")

    # Fonction pour effacer la liste
    def effacer_liste(self):
        for item in self.liste_paquets.get_children():
            self.liste_paquets.delete(item)

    # Fonction pour mettre à jour le graphique
    def mise_a_jour_graphique(self):
        precedent = psutil.net_io_counters()
        while self.en_cours:
            time.sleep(1)
            actuel = psutil.net_io_counters()
            entree = (actuel.bytes_recv - precedent.bytes_recv) / 1024
            sortie = (actuel.bytes_sent - precedent.bytes_sent) / 1024
            precedent = actuel

            self.entrees.append(entree)
            self.sorties.append(sortie)

            if len(self.entrees) > 60:
                self.entrees.pop(0)
                self.sorties.pop(0)

            self.ligne_entree.set_data(range(len(self.entrees)), self.entrees)
            self.ligne_sortie.set_data(range(len(self.sorties)), self.sorties)
            self.ax.set_ylim(0, max(self.entrees + self.sorties + [50]))
            self.canvas.draw()

            if max(entree, sortie) < 100:
                self.label_etat.config(text="Etat : Normal", fg="green")
            else:
                self.label_etat.config(text="Etat : Elevé", fg="red")

    # Fonction qui démarre la capture de paquets
    def sniffer_paquets(self):
        sniff(prn=self.traiter_paquet, store=False)

    # Fonction qui traite les paquets un par un
    def traiter_paquet(self, paquet):
        if self.en_pause:
            return
        if IP in paquet:
            heure = time.strftime("%H:%M:%S")
            source = paquet[IP].src
            destination = paquet[IP].dst
            protocole = {6: "TCP", 17: "UDP", 1: "ICMP"}.get(paquet[IP].proto, str(paquet[IP].proto))
            filtre = self.menu_filtre.get()
            if filtre != "Tous" and filtre != protocole:
                return
            self.liste_paquets.insert("", 0, values=(heure, source, destination, protocole))
            if len(self.liste_paquets.get_children()) > 200:
                for i in self.liste_paquets.get_children()[200:]:
                    self.liste_paquets.delete(i)

# Lancer l'application
if __name__ == "__main__":
    fenetre = tk.Tk()
    app = SniffeurReseau(fenetre)
    fenetre.mainloop()
